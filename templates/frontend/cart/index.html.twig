{% extends 'layout_frontend.html.twig' %}

{% block title %}Cart{% endblock %}

{% block content %}
    <style>
        .example-wrapper {
            margin: 1em auto;
            max-width: 800px;
            width: 95%;
            font: 18px/1.5 sans-serif;
        }

        .example-wrapper code {
            background: #F5F5F5;
            padding: 2px 6px;
        }
    </style>

    <div class="example-wrapper">
        <input type="hidden" id="csrf_token" value="{{ csrf_token('cart') }}">
        <div class="clients-table">
            <table class="table table-hover">
                <thead>
                <tr>
                    <td>#</td>
                    <td>Title</td>
                    <td>Price</td>
                    <td>Quantity</td>
                    <td>Actions</td>
                </tr>
                </thead>
                <tbody id="order-items">
                {% set total = 0 %}
                {% for key, cartProduct in cartProducts %}
                    {% set total = total + (cartProduct.qty * cartProduct.price) %}
                    <tr>
                        <td>{{ key + 1 }}</td>
                        <td>{{ cartProduct.title }}</td>
                        <td>{{ cartProduct.price }}</td>
                        <td>
                            <input type="number" value="{{ cartProduct.qty ? cartProduct.qty : 1 }}" class="add-qty"
                                   data-item="{{ cartProduct.hash }}">
                        </td>
                        <td>
                        <span class="delete-cart-product" data-delete="{{ cartProduct.hash }}">
                            <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-trash"
                                 fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                            <path fill-rule="evenodd"
                                  d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                            </svg>
                        </span>
                        </td>
                    </tr>
                {% endfor %}


                </tbody>
            </table>
            <span class="alert alert-warning d-none product-qty-info"></span>

        </div>
        <div class="row">
            <div class="jumbotron col-md-12">
                <p class="cart-total">Total:<span id="total">{{ total }}</span></p>
            </div>
        </div>
        <div class="row">
            <div class="col-md-8"></div>
            <div class="col-md-4">
                {% if numberOfProducts %}
                    <a href="{{ path('order.store') }}">Next step</a>
                {% endif %}
            </div>
        </div>
    </div>
{% endblock %}

{% block page_javascripts %}
    <script>
        let hashes = '{{ ids|raw }}';
        let products = JSON.parse(hashes);
        window.addEventListener('DOMContentLoaded', function (evnt) {
            let total = $('#total');
            let token = $('#csrf_token').val();

            $(".add-qty").keyup(function (e) {
                let self = $(this);
                let formData = new FormData();
                formData.append('product', self.attr("data-item"));
                formData.append('qty', self.val());
                formData.append('token', token);
                checkQty(formData, function(status) {
                    if (!status)
                        addToCart(formData);
                });

            });

            function addToCart(formData) {
                $.ajax({
                    url: '/cart/add',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (xhr, status) {
                        if (xhr.csrf_token_mismatch === undefined) {
                            // get cart
                            let cart = $('#cart-no-items');
                            // get number of cart items
                            let noCartItems = parseInt($('#cart-no-items').text());
                            // increment by 1
                            noCartItems += parseInt(xhr.qty);
                            cart.text(noCartItems);

                            let totalPrice = parseInt(total.text()) + parseInt(xhr.product_price);
                            total.text(totalPrice);
                        }
                    }
                })
            }

            function checkQty(formData, callback) {
                $.ajax({
                    url: '/cart/checkQty',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (xhr, status) {
                        let productInfo = $('.product-qty-info');
                        productInfo.addClass('d-none');
                        if (xhr.status === true) {
                            callback(false)
                        } else if (xhr.maxQty !== undefined) {
                            productInfo.text(xhr.message);
                            productInfo.removeClass('d-none');
                            callback(true)
                        }
                    }
                })
            }
            $('.delete-cart-product').on('click', function (e) {
                let self = $(this);
                let formData = new FormData();
                formData.append('product', self.attr('data-delete'));
                formData.append('token', token);

                $.ajax({
                    url: '/cart/remove',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (xhr, status) {
                         self.closest('tr').remove();
                        // set total price
                        total.text(xhr.total);
                        // get cart
                        let cart = $('#cart-no-items');
                        // get number of cart items
                        let noCartItems = $('#cart-no-items').text();
                        // calculate number of items after removing from cart
                        let remainingCartItems = parseInt(noCartItems) - parseInt(xhr.removedItems);
                        cart.text(remainingCartItems);
                    }
                })
            })

        });
    </script>

{% endblock %}


